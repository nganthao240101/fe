{"ast":null,"code":"var utilities = require('./utilities');\n\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n// http://www.w3.org/TR/html/syntax.html#void-elements\nvar VOID_ELEMENTS_REGEX = /<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi;\n\n// detect IE browser\nvar isIE9 = utilities.isIE(9);\nvar isIE = isIE9 || utilities.isIE();\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error('This browser does not support `document.implementation.createHTMLDocument`');\n};\nvar parseFromString = function () {\n  throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n\n  // IE9 does not support 'text/html' MIME type\n  // https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\n  var mimeType = isIE9 ? 'text/xml' : 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    // because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\n    if (isIE9) {\n      html = html.replace(VOID_ELEMENTS_REGEX, '<$1$2$3/>');\n    }\n    return domParser.parseFromString(html, mimeType);\n  };\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(isIE ? 'html-dom-parser' : undefined);\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n    try {\n      doc.documentElement.innerHTML = html;\n      return doc;\n      // fallback when certain elements in `documentElement` are read-only (IE9)\n    } catch (err) {\n      if (parseFromString) {\n        return parseFromString(html);\n      }\n    }\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n  var doc;\n  var element;\n  var elements;\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n      return doc.getElementsByTagName(HTML);\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0].childNodes;\n  }\n}\nmodule.exports = domparser;","map":{"version":3,"names":["utilities","require","HTML","HEAD","BODY","FIRST_TAG_REGEX","HEAD_TAG_REGEX","BODY_TAG_REGEX","VOID_ELEMENTS_REGEX","isIE9","isIE","parseFromDocument","Error","parseFromString","window","DOMParser","domParser","mimeType","html","tagName","replace","document","implementation","doc","createHTMLDocument","undefined","documentElement","getElementsByTagName","innerHTML","err","template","createElement","parseFromTemplate","content","childNodes","domparser","firstTagName","match","toLowerCase","element","elements","test","parentNode","removeChild","module","exports"],"sources":["C:/Users/Ngan/Desktop/LTTH/Full-Ecommerce-template/ecommerce/website/node_modules/html-dom-parser/lib/domparser.js"],"sourcesContent":["var utilities = require('./utilities');\n\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\nvar HEAD_TAG_REGEX = /<head.*>/i;\nvar BODY_TAG_REGEX = /<body.*>/i;\n// http://www.w3.org/TR/html/syntax.html#void-elements\nvar VOID_ELEMENTS_REGEX = /<(area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)(.*?)\\/?>/gi;\n\n// detect IE browser\nvar isIE9 = utilities.isIE(9);\nvar isIE = isIE9 || utilities.isIE();\n\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\nvar parseFromDocument = function () {\n  throw new Error(\n    'This browser does not support `document.implementation.createHTMLDocument`'\n  );\n};\n\nvar parseFromString = function () {\n  throw new Error(\n    'This browser does not support `DOMParser.prototype.parseFromString`'\n  );\n};\n\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof window.DOMParser === 'function') {\n  var domParser = new window.DOMParser();\n\n  // IE9 does not support 'text/html' MIME type\n  // https://msdn.microsoft.com/en-us/library/ff975278(v=vs.85).aspx\n  var mimeType = isIE9 ? 'text/xml' : 'text/html';\n\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      html = '<' + tagName + '>' + html + '</' + tagName + '>';\n    }\n\n    // because IE9 only supports MIME type 'text/xml', void elements need to be self-closed\n    if (isIE9) {\n      html = html.replace(VOID_ELEMENTS_REGEX, '<$1$2$3/>');\n    }\n\n    return domParser.parseFromString(html, mimeType);\n  };\n\n  parseFromDocument = parseFromString;\n}\n\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (document.implementation) {\n  // title parameter is required in IE\n  // https://msdn.microsoft.com/en-us/library/ff975457(v=vs.85).aspx\n  var doc = document.implementation.createHTMLDocument(\n    isIE ? 'html-dom-parser' : undefined\n  );\n\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param  {string} html      - The HTML string.\n   * @param  {string} [tagName] - The element to render the HTML (with 'body' as fallback).\n   * @return {HTMLDocument}\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;\n      return doc;\n    }\n\n    try {\n      doc.documentElement.innerHTML = html;\n      return doc;\n      // fallback when certain elements in `documentElement` are read-only (IE9)\n    } catch (err) {\n      if (parseFromString) {\n        return parseFromString(html);\n      }\n    }\n  };\n}\n\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = document.createElement('template');\nvar parseFromTemplate;\n\nif (template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param  {string} html - The HTML string.\n   * @return {NodeList}\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param  {string} html - The HTML string.\n * @return {NodeList|Array}\n */\nfunction domparser(html) {\n  var firstTagName;\n  var match = html.match(FIRST_TAG_REGEX);\n\n  if (match && match[1]) {\n    firstTagName = match[1].toLowerCase();\n  }\n\n  var doc;\n  var element;\n  var elements;\n\n  switch (firstTagName) {\n    case HTML:\n      doc = parseFromString(html);\n\n      // the created document may come with filler head/body elements,\n      // so make sure to remove them if they don't actually exist\n      if (!HEAD_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(HEAD)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      if (!BODY_TAG_REGEX.test(html)) {\n        element = doc.getElementsByTagName(BODY)[0];\n        if (element) {\n          element.parentNode.removeChild(element);\n        }\n      }\n\n      return doc.getElementsByTagName(HTML);\n\n    case HEAD:\n    case BODY:\n      elements = parseFromDocument(html).getElementsByTagName(firstTagName);\n\n      // if there's a sibling element, then return both elements\n      if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n        return elements[0].parentNode.childNodes;\n      }\n      return elements;\n\n    // low-level tag or text\n    default:\n      if (parseFromTemplate) {\n        return parseFromTemplate(html);\n      }\n\n      return parseFromDocument(html, BODY).getElementsByTagName(BODY)[0]\n        .childNodes;\n  }\n}\n\nmodule.exports = domparser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}